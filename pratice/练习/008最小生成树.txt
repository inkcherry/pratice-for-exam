#include<iostream>
#include<fstream>
#include<string.h>
#include<string>
#include<vector>
#include<memory.h>

//最小生成树
int a[100][100];
using namespace std;
vector<int>vec;
int have[100];
vector<pair<int, int>>t;
int cnt = 0;
int main()
{  
	ifstream infile("C:\\Users\\inkcherry\\Desktop\\pratice\\input\\008.txt");
	int n, m, k;  //n个顶点   m个边 从k开始
	infile>> n >> m >> k;
	memset(have, 0, sizeof(have));
	memset(a, 127, sizeof(a));
	int x1, y3;
	for (int i = 0; i < m; i++)
	{
		infile >> x1>>y3;
		infile >> a[x1][y3];
		a[y3][x1] = a[x1][y3];
	}
	vec.push_back(k);
	have[k] = 1;
	cnt = 1;
	int mii = 9999999;
	

	while (cnt != n)
	{
		int index1 = 0;
		int index2 = 0;
		mii = 99999999;
		for (auto i = vec.begin(); i != vec.end(); ++i)
		{
			for (int j = 0; j < n; j++)
			{
				if (have[j] == 1)
				{
					continue;
				}
				if (a[*i][j] < mii)
				{
					index1 = *i;
					index2 = j;
					mii = a[*i][j];
				}
			}
		}
		vec.push_back(index2);
		cnt++;
		have[index2] = 1;
		t.push_back(make_pair(index1, index2));
	}
	for (auto i = t.begin(); i !=t.end(); ++i)
	{
		cout << (*i).first << " " << (*i).second << endl;
	}
	return 0;
}