

#include<iostream>
#include<fstream>
#include<string.h>
#include<string>
#include<vector>
#include<memory.h>
#include<stack>
#include<cctype>
#include<math.h>
#include<algorithm>
using namespace std;
int prime[100];
int rec[100][100];
int cnt[100];
int print[100];
int index;
int numcnt;

int finalprint[100];
int m, n;

int isprime(int n)
{
	/*if (n == 12)
		int sadfasdf = 0;*/
	if (prime[n] != -1)
	{
		return prime[n];
	}
	else {
		for (int i = 2; i <=sqrt(n); i++)
		{
			if (n%i == 0)
			{
				prime[n] = 0;
				return 0;
			}
		}
		prime[n] = 1;
		return 1;
	}
	return prime[n];
}

void dfs(int t,int deep)
{
	if (deep == numcnt)
	{
	/*	for (int i = 1; i <= deep; i++)
		{

					cout << print[i]<<" ";
	
	
		}
		cout << endl;*/

		memset(finalprint, 0, sizeof(finalprint));

		for (int i = 1; i <= deep; i++)
		{
			
				int temp = i - 1;
				finalprint[print[i]]++;
				finalprint[m + temp * 2 - print[i]]++;
		}
		cout << endl;
		for (int i = 0; i <= n; i ++)
		{  
			if(finalprint[i] !=0)
			cout << i << " " << finalprint[i] << " ";
		}
		cout << endl;

	}
	else
	{
		int newt = t + 2;
		for (int i = 0; i < cnt[newt]; i++)
		{
			print[deep + 1] = rec[newt][i];
			dfs(t + 2, deep + 1);

		}
	}
}

int main()
{
	for (int i = 0; i < 100; i++)
		prime[i] = -1;
	

	memset(rec, 0, sizeof(0));
	memset(cnt, 0, sizeof(0));
	
	cin >> m >> n;
	if (m % 2 == 1)
		m++;
	if (n % 2 == 1)
		n--;
	numcnt = (n - m) / 2 + 1;
	for (int i = m; i <= n; i += 2)
	{
		for (int j = 2; j <= i/2; j++)
		{
			if (isprime(j) && isprime(i - j))
			{
				rec[i][cnt[i]] = j;
		     	cnt[i]++;
			}

		}
	}
   
	
	index = 1;
	for (int i = 0; i < cnt[m]; i++)
	{
		print[1] = rec[m][i];   
		dfs(m,1);
	}
    
	   
	



	return 0;
}
